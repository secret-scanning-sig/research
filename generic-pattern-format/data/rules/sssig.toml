[[rules]]
  id = 'SSSIGTVE2THEZF64SBFFM'

  [rules.meta]
    tags = ['identifier', 'api']
    references = [
      'https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids',
      'https://medium.com/@TalBeerySec/a-short-note-on-aws-key-id-f88cc4317489',
      'https://github.com/awslabs/git-secrets/blob/master/git-secrets',
      'https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html',
      'https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html',
      'https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html',
      'https://docs.aws.amazon.com/accounts/latest/reference/credentials-access-keys-best-practices.html',
    ]
    examples = {
      positive = [
        'A3T0ABCDEFGHIJKLMNOP',
        'AKIADEADBEEFDEADBEEF',
      ],
      negative = [
        'A3T0ABCDEFGHIJKLMNO',
        'A3T0ABCDEFGHIjklmnop',
        '======================',
        '//////////////////////',
        '++++++++++++++++++++++',
      ],
    }

  [rules.target]
    kind = 'AwsIamUniqueId'
    name = 'AWS IAM Unqiue ID'
    pattern = '''(?:A3T[A-Z0-9]|AKIA|ASIA|ABIA|ACCA)[A-Z2-7]{16}'''
    description = '''When IAM creates a user, user group, role, policy, instance profile, or server certificate, it assigns a unique ID to each resource.'''

  [[rules.conditions]]
    prefix_matches.target = '''\A|\W'''
    suffix_matches.target = '''\W|\z'''
    entropy_gt.target= 3.0
    not_matches.target= '''(?i)example|abcd|1234'''
    not_matches_in.context = [
      '''X-Amz-Signature|WC1BbXotU2lnbmF0dXJl|gtQW16LVNpZ25hdHVyZ|YLUFtei1TaWduYXR1cm''',
      '''(?i)(?:sample|example).{0,128}(?:A3T[A-Z0-9]|AKIA|ASIA|ABIA|ACCA)[A-Z2-7]{16}(?:\W|\z)''',
    ]

[[rules]]
  id = 'SSSIGTVE2THEZF64SBFFM'
  references = [
    'https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml',
    'https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/',
  ]

  [rules.target]
    kind = 'AtlassianApiToken'
    name = 'Atlassian API token'
    pattern = '[a-z0-9]{20}[a-f0-9]{4}'
    description = '''
    You can use an API token to authenticate a script with an Atlassian cloud
    app. You generate the token from your Atlassian account, then copy and
    paste it into a script.
    '''

  [rules.condition]
    target.prefix_matches = '''(?i)[\w.-]{0,50}?(?:(?-i:ATLASSIAN|[Aa]tlassian)|(?-i:CONFLUENCE|[Cc]onfluence)|(?-i:JIRA|[Jj]ira))(?:[ \t\w.-]{0,20})[\s'"]{0,3}(?:=|>|:{1,3}=|\|\||:|=>|\?=|,)[\x60'"\s=]{0,5}'''
    target.suffix_matches = '''\W|\z'''
    target.entropy_gt = 3.5

[[rules]]
  id = 'SSSIG7NHZTOAWKKLZIHAJ'
  references = [
    'https://github.com/gitleaks/gitleaks/blob/master/config/gitleaks.toml',
    'https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/',
  ]

  [rules.target]
    kind = 'AtlassianApiToken'
    name = 'Atlassian API token'
    pattern = 'ATATT3[A-Za-z0-9_\-=]{186}'
    description = '''
    You can use an API token to authenticate a script with an Atlassian cloud
    app. You generate the token from your Atlassian account, then copy and
    paste it into a script.
    '''

  [rules.condition]
    target.prefix_matches = '''\A|\W'''
    target.suffix_matches = '''\W|\z'''
    target.entropy_gt = 3.5


[[rules]]
  id = 'SSSIGTVE2THEZF64SBFFM'

  [rules.target]
    kind = 'CloudFlareOriginCAKey'
    name = 'Cloudflare Origin CA Key'
    pattern = '''v1\.0-[a-f0-9]{24}-[a-f0-9]{146}'''

  [rules.condition]
    target.prefix_matches = '''\A|\W'''
    target.suffix_matches = '''[\x60\'\"\s;]|\\[nr]|$'''
    target.entropy_gt = 2

[[rules]]
  id = 'SSSIGHP6SVITIDKEB5QEE'

  [rules.meta]
    tags = ['curl', 'cli']

  [rules.target]
    kind = 'BasicAuthPassword'
    name = 'Basic Auth Password'
    pattern = '''[^\'\"\s\`]{3,128}'''

  [rules.condition]
    target.prefix_matches = '''(?:\A|\W)curl\s[\s\S]{0,128}(?:--user|-u)[\s=]+[^:]{0,128}:[\\\'\"]?'''
    target.entropy_gt = 2
    target.not_matches_in = [
      'change',
      'passw',
      'pwd',
      'test',
      'token',
      '[\.\*\+]{3,}',
    ]

[[rules]]
  id = 'SSSIGQJMUXKZWYMLMQWP5'

  [rules.meta]
    note = '''
    This only partially implements generic-api-key from gitleaks. Apart from
    leaving things out for breavity there's also an allowlist item it
    leaves out but I might argue it's worth leaving out for the sake of
    portability across tools.
    '''

  [rules.target]
    kind = 'GenericSecret'
    name = 'Generic Secret'
    pattern = '''(?i)[\w\.\-=]{10,150}|[a-z0-9][a-z0-9+/]{11,}={0,3}'''

  [rules.condition]
    target.prefix_matches = '''(?i)[\w.-]{0,50}?(?:access|auth|(?-i:[Aa]pi|API)|credential|creds|key|passw(?:or)?d|secret|token)(?:[ \t\w.-]{0,20})[\s'"]{0,3}(?:=|>|:{1,3}=|\|\||:|=>|\?=|,)[\x60'"\s=]{0,5}'''
    target.suffix_matches = '''[\x60'"\s;]|\\[nr]|\z'''
    target.entropy_gt = 3.5
    target.not_matches_in = [
      '''\A[a-zA-Z_.-]+\Z''',
      # Not pulling the full ist in here, but just grabbing a few as an example
      '''(?i)(?:account|bosh|bot-|bot.|bot_|bower|box-|box\.|box_|boxen|bracket|branch|bridge)''',
      '''(?i)(?:commander|commit|passw|change|token|1234|computer|config|deamon)''',
    ]
    context.not_matches_in = [
      '''--mount=type=secret,''',
      '''import[\x20\t]+{[\x20\t\w,]+}[\x20\t]+from[\x20\t]+[\'\"][^\'\"]+[\'\"]''',
      '''(?i)(?:access(?:ibility|or)|access[_.-]?id|random[_.-]?access|api[_.-]?(?:id|name|version)|rapid|capital|[a-z0-9-]*?api[a-z0-9-]*?:jar:|author|X-MS-Exchange-Organization-Auth|Authentication-Results|(?:credentials?[_.-]?id|withCredentials)|(?:bucket|foreign|hot|idx|natural|primary|pub(?:lic)?|schema|sequence)[_.-]?key|(?:turkey)|key[_.-]?(?:alias|board|code|frame|id|length|mesh|name|pair|press(?:ed)?|ring|selector|signature|size|stone|storetype|word|up|down|left|right)|key[_.-]?vault[_.-]?(?:id|name)|keyVaultToStoreSecrets|key(?:store|tab)[_.-]?(?:file|path)|issuerkeyhash|(?-i:[DdMm]onkey|[DM]ONKEY)|keying|(?:secret)[_.-]?(?:length|name|size)|UserSecretsId|(?:csrf)[_.-]?token|(?:io\.jsonwebtoken[ \t]?:[ \t]?[\w-]+)|(?:api|credentials|token)[_.-]?(?:endpoint|ur[il])|public[_.-]?token|(?:key|token)[_.-]?file|(?-i:(?:[A-Z_]+=\n[A-Z_]+=|[a-z_]+=\n[a-z_]+=)(?:\n|\z))|(?-i:(?:[A-Z.]+=\n[A-Z.]+=|[a-z.]+=\n[a-z.]+=)(?:\n|\z)))''',
    ]

[[rules]]
  id = 'SSSIGPYKJZOEVVGDMWCWD'
  references = [
    'https://www.wireguard.com/quickstart/',
    'https://manpages.debian.org/testing/wireguard-tools/wg.8.en.html',
    'https://gist.github.com/lanceliao/5d2977f417f34dda0e3d63ac7e217fd6',
  ]

  [rules.meta]
    tags = ['fuzzy', 'secret']
    examples = [
      '''
      [Interface]
      Address = 10.200.200.3/32
      PrivateKey = AsaFot43bfs1fEWjvtty+rGcjh3rP1H6sug1l3u19ix=
      DNS = 8.8.8.8
      '''
    ]

  [rules.target]
    id = 'WireGuardPrivateKey'
    name = 'Wire Guard Private Key'
    pattern = '''[A-Za-z0-9+/]{43}='''

  [rules.condition]
    match.prefix_matches = '''PrivateKey\s*=\s*'''

[[rules]]
  id = 'SSSIGXMTJQ5OTBD37ES7Q'
  references = [
    'https://www.wireguard.com/quickstart/',
    'https://manpages.debian.org/testing/wireguard-tools/wg.8.en.html',
    'https://gist.github.com/lanceliao/5d2977f417f34dda0e3d63ac7e217fd6',
  ]

  [rules.meta]
    tags = ['fuzzy', 'secret']
    examples = [
      '''
      [Peer]
      PublicKey = [Server's public key]
      PresharedKey = uRsfsZ2Ts1rach4Zv3hhwcx6wa5fuIo2u3w7sa+7j81=
      AllowedIPs = 0.0.0.0/0, ::/0
      Endpoint = [Server Addr:Server Port]
      '''
    ]

  [rules.target]
    id = 'WireGuardPresharedKey'
    name = 'Wire Guard Preshared Key'
    pattern = '''[A-Za-z0-9+/]{43}='''

  [rules.condition]
    match.prefix_matches = '''PresharedKey\s*=\s*'''

[[rules]]
  id = 'SSSIGPHWSTKPXP2TMEKHU'
  references = [
    'https://docs.aws.amazon.com/general/latest/gr/rande.html',
  ]

  [rules.meta]
    tags = ['api', 'identifier']
    examples = [
      'example-bucket.s3.amazonaws.com',
      'http://bucket.s3-us-east-2.amazonaws.com',
      'http%2F%2Fsome-bucket.s3.amazonaws.com',
    ]
    negative_examples = [
      '.s3.amazonaws.com',
      's3.amazonaws.com',
    ]

  [rules.target]
    id = 'AwsS3Bucket'
    name = 'AWS S3 Bucket'
    pattern = '''[\w-]+'''

  [rules.condition]
    match.prefix_matches = '''(?:\A|[\s\/\"\']|%2F)'''
    match.suffix_matches = '''(?i)\.s3(?:-(?:af|ap|ca|eu|me|sa|us(?:-gov)?)-(?:central|(?:north|south)(?:east|west)?)-[1-3])?\.amazonaws\.com(?:\W|\z)'''

[[rules]]
  id = 'SSSIGWGS6KSUVNYJ2BIB7'
  references = [
    'https://api.slack.com/concepts/token-types',
  ]

  [rules.meta]
    author = 'Author Name'
    version = '0.2.0'

  [rules.target]
    kind = 'SlackUserOAuthToken'
    name = 'Slack User OAuth Token'
    pattern = '''xoxp-[0-9]{4,24}-[0-9]{4,24}-[0-9]{4,24}-[0-9a-fA-F]{32}'''
    description = '''
    A Slack user OAuth token (which typically begins with xoxp-) is an access
    token obtained through the Slack OAuth flow that represents the permissions
    granted to a Slack app by a specific user within a workspace. This token
    allows the app to perform actions on behalf of that user, such as sending
    messages, accessing user-specific information, or interacting with channels
    and conversations, based on the scopes granted during the OAuth process.
    '''

  [rules.condition]
    match.prefix_matches = '\A|\W'
    match.suffix_matches = '\W|\z'

[[rules]]
  id = 'SSSIGJGLD46T4E3CFTSJQ'
  references = [
    'https://cloud.google.com/iam/docs/service-account-overview',
    'https://www.ibm.com/docs/en/dsm?topic=firewall-configuring-google-cloud-platform-communicate-qradar',
  ]

  [rules.meta]
    author = 'Author Name'
    version = '0.4.0'

  [rules.target]
    kind = 'GcpServiceAccountInfo'
    name = 'Google Cloud Platform Service Account Info'
    pattern = '''\{[^\}]{0,256}(?:\"(?:client_x509_cert_url|private_key|client_email)\"\s*:\s*\"[^\"]+"[^\}]{0,256}){3}\}'''

  [rules.condition]
    path.not_matches = '''(?i)\.(md|adoc|rst|html)\z'''
